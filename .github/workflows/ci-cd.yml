name: Pipeline CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  construir-y-probar:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    env:
      NODE_ENV: test
      DATABASE_URL: 'mysql://user:password@localhost:3306/testdb'

    steps:
      - name: Obtener código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Esperar a que MySQL esté listo
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando a MySQL..."
            sleep 1
          done

      - name: Ejecutar migraciones de la base de datos
        run: npx prisma migrate deploy

      - name: Ejecutar Lint
        run: npm run lint

      - name: Instalar JMeter
        run: |
          wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz
          sudo mv apache-jmeter-5.6.3 /opt/jmeter
          sudo ln -s /opt/jmeter/bin/jmeter /usr/local/bin/jmeter

      - name: Instalar Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb

      - name: Configurar ChromeDriver
        run: |
          # Definir la versión de ChromeDriver que deseas instalar
          CHROME_DRIVER_VERSION=129.0.6668.70

          # Definir la URL de descarga basada en la versión
          CHROME_DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${CHROME_DRIVER_VERSION}/linux64/chromedriver-linux64.zip"

          echo "Descargando ChromeDriver versión ${CHROME_DRIVER_VERSION} desde ${CHROME_DRIVER_URL}..."
          wget -q ${CHROME_DRIVER_URL} -O chromedriver-linux64.zip

          echo "Descomprimiendo ChromeDriver..."
          unzip -o chromedriver-linux64.zip

          echo "Moviendo ChromeDriver a /usr/local/bin..."
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/

          echo "Asignando permisos de ejecución a ChromeDriver..."
          sudo chmod +x /usr/local/bin/chromedriver

          # Verificar la instalación
          echo "Verificando la versión instalada de ChromeDriver..."
          chromedriver --version

          # Limpieza de archivos temporales
          rm chromedriver-linux64.zip
          rm -rf chromedriver-linux64/

      - name: Ejecutar todas las pruebas (unitarias, integración y rendimiento)
        run: |
          # Definir el puerto para estas pruebas
          export PORT=3000

          # Iniciar el servidor en segundo plano
          npm run start &
          SERVER_PID=$!

          # Esperar a que el servidor esté listo en el puerto 3000
          echo "Esperando a que el servidor esté listo en el puerto ${PORT}..."
          npx wait-on http://localhost:${PORT}/products

          # Ejecutar todas las pruebas
          npm run test:all

          # Detener el servidor
          # echo "Deteniendo el servidor..."
          # kill $SERVER_PID

      - name: Ejecutar pruebas E2E con Selenium
        run: |
          # Ejecutar las pruebas de Selenium
          npm run selenium-test

      - name: Ejecutar pruebas E2E con Cypress
        run: |
          # Ejecutar las pruebas de Cypress
          npm run test:e2e

      - name: Mostrar resultados de Cypress
        run: |
          echo "Mostrando resultados de pruebas de Cypress:"
          cat cypress/reports/mochawesome.json || echo "No se encontraron archivos JSON de informe de Cypress."
          cat cypress/reports/mochawesome.html || echo "No se encontró el informe HTML de Cypress."

      - name: Mostrar resultados de JMeter
        run: |
          echo "Mostrando resultados de pruebas de JMeter:"
          cat testResults.jtl || echo "No se generó testResults.jtl."

      - name: Verificar informes de JMeter
        run: |
          echo "Verificando contenido de report:"
          ls -la report

  desplegar:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3

      - name: Desplegar en Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/v1/services/srv-crsdonu8ii6s73ecpbpg/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY"

  notificar-fallo:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: failure()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Enviar notificación por correo electrónico de fallo
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
        run: node send-email-failure.js

  notificar-exito:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Enviar notificación por correo electrónico de éxito
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
        run: node send-email-success.js
