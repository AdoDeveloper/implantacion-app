name: Pipeline CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  construir-y-probar:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    env:
      NODE_ENV: test
      DATABASE_URL: 'mysql://user:password@localhost:3306/testdb'

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        timeout-minutes: 2

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
        timeout-minutes: 2

      - name: Instalar dependencias
        run: npm ci
        timeout-minutes: 2

      - name: Esperar a que MySQL esté listo
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando a MySQL..."
            sleep 1
          done
        timeout-minutes: 2

      - name: Ejecutar migraciones de la base de datos
        run: npx prisma migrate deploy
        timeout-minutes: 2

      - name: Ejecutar Lint
        run: npm run lint
        timeout-minutes: 2

      - name: Instalar JMeter
        run: |
          wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz
          sudo mv apache-jmeter-5.6.3 /opt/jmeter
          sudo ln -s /opt/jmeter/bin/jmeter /usr/local/bin/jmeter
        timeout-minutes: 2

      - name: Instalar Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
        timeout-minutes: 2

      - name: Configurar ChromeDriver
        run: |
          CHROME_DRIVER_VERSION=129.0.6668.70
          CHROME_DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${CHROME_DRIVER_VERSION}/linux64/chromedriver-linux64.zip"

          echo "Descargando ChromeDriver versión ${CHROME_DRIVER_VERSION} desde ${CHROME_DRIVER_URL}..."
          wget -q ${CHROME_DRIVER_URL} -O chromedriver-linux64.zip

          echo "Descomprimiendo ChromeDriver..."
          unzip -o chromedriver-linux64.zip

          echo "Moviendo ChromeDriver a /usr/local/bin..."
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/

          echo "Asignando permisos de ejecución a ChromeDriver..."
          sudo chmod +x /usr/local/bin/chromedriver

          echo "Verificando la versión instalada de ChromeDriver..."
          chromedriver --version

          rm chromedriver-linux64.zip
          rm -rf chromedriver-linux64/
        timeout-minutes: 2

      - name: Ejecutar todas las pruebas (unitarias, integración y rendimiento)
        run: |
          set -e
          export PORT=3000
          npm run start &
          SERVER_PID=$!
          echo "Esperando 90 a que el servidor esté listo..."
          sleep 10  # Espera 10 segundos
          npx wait-on http://localhost:${PORT}/products
          npm run test:all
          echo "Deteniendo el servidor..."
          kill $SERVER_PID
        timeout-minutes: 1.5

      - name: Ejecutar pruebas E2E con Selenium
        run: |
          set -e
          npm run selenium-test
        timeout-minutes: 2

      - name: Ejecutar pruebas E2E con Cypress
        run: |
          set -e
          npm run test:e2e
        timeout-minutes: 2

      - name: Mostrar resultados de Cypress
        run: |
          echo "Mostrando resultados de pruebas de Cypress:"
          cat cypress/reports/mochawesome.json || echo "No se encontraron archivos JSON de informe de Cypress."
          cat cypress/reports/mochawesome.html || echo "No se encontró el informe HTML de Cypress."
        timeout-minutes: 2

      - name: Mostrar resultados de JMeter
        run: |
          echo "Mostrando resultados de pruebas de JMeter:"
          cat testResults.jtl || echo "No se generó testResults.jtl."
        timeout-minutes: 2

      - name: Verificar informes de JMeter
        run: |
          echo "Verificando contenido de report:"
          ls -la report
        timeout-minutes: 2

  desplegar:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Obtener todo el historial de commits

      - name: Desplegar en Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/v1/services/srv-crsdonu8ii6s73ecpbpg/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY"

  notificar-fallo:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: ${{ failure() || cancelled() }}
    
    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Obtener todo el historial de commits

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Obtener información del último merge
        id: last_merge
        run: |
          # Verificar si el evento es un pull_request y si fue merged
          if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            LAST_MERGE_COMMIT=$(git log --merges -1 --pretty=format:"%H")
            echo "Último commit de merge: $LAST_MERGE_COMMIT"
            echo "LAST_MERGE_COMMIT=$LAST_MERGE_COMMIT" >> $GITHUB_ENV
          else
            echo "El PR no fue mergeado. No se necesita revertir."
            echo "LAST_MERGE_COMMIT=" >> $GITHUB_ENV
          fi

      - name: Verificar LAST_MERGE_COMMIT
        run: echo "LAST_MERGE_COMMIT=${{ env.LAST_MERGE_COMMIT }}"

      - name: Listar últimos 5 commits
        run: git log -5 --oneline

      - name: Configurar Git
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Revertir el último merge si hay fallo
        if: ${{ env.LAST_MERGE_COMMIT != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_REPO }}  # Usar GITHUB_TOKEN
        run: |
          echo "Revirtiendo el merge commit: $LAST_MERGE_COMMIT"
          git revert -m 1 $LAST_MERGE_COMMIT --no-edit
          git push origin main
          echo "Revertido el merge commit: $LAST_MERGE_COMMIT"

      - name: Confirmar Revertido Exitoso
        run: |
          if git log -1 --grep="Revert"; then
            echo "Revertido exitosamente el commit: $LAST_MERGE_COMMIT"
          else
            echo "No se pudo revertir el commit: $LAST_MERGE_COMMIT"
            exit 1
          fi

      - name: Enviar notificación por correo electrónico de fallo
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
          TOKEN_REPO: ${{ secrets.TOKEN_REPO }}
        run: node send-email-failure.js

  notificar-exito:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Obtener todo el historial de commits

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Enviar notificación por correo electrónico de éxito
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
          TOKEN_REPO: ${{ secrets.TOKEN_REPO }}
        run: node send-email-success.js