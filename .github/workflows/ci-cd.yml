name: Pipeline CI/CD

on:
  push:
    branches:
      - main

jobs:
  construir-y-probar:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    env:
      NODE_ENV: test
      DATABASE_URL: 'mysql://user:password@localhost:3306/testdb'

    steps:
      - name: Obtener código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Esperar a que MySQL esté listo
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando a MySQL..."
            sleep 1
          done

      - name: Ejecutar migraciones de la base de datos
        run: npx prisma migrate deploy

      - name: Ejecutar Lint
        run: npm run lint

      - name: Instalar JMeter
        run: |
          wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz
          sudo mv apache-jmeter-5.6.3 /opt/jmeter
          sudo ln -s /opt/jmeter/bin/jmeter /usr/local/bin/jmeter

      - name: Ejecutar pruebas de extremo a extremo
        run: npm run test:e2e

      - name: Mostrar resultados de Cypress
        run: |
          echo "Mostrando resultados de pruebas de Cypress:"
          cat cypress/reports/*.json || echo "No se encontraron archivos JSON de informe de Cypress."

      - name: Subir artefactos de videos de Cypress
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: videos-cypress
          path: cypress/videos

      - name: Subir capturas de pantalla de Cypress
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: capturas-cypress
          path: cypress/screenshots

      - name: Ejecutar pruebas de rendimiento con JMeter
        run: |
          jmeter -n -t src/tests/performance/productPerformanceTest.jmx -l testResults.jtl -e -o report
          echo "Pruebas de JMeter completadas. Resumen de resultados:"
          cat testResults.jtl || echo "No se generó testResults.jtl."

      - name: Subir informe de JMeter
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: informe-jmeter
          path: report

  desplegar:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3

      - name: Desplegar en Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/v1/services/srv-crsdonu8ii6s73ecpbpg/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY"

  notificar:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: failure()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Enviar notificación por correo electrónico
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
        run: node send-email.js
