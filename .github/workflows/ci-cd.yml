name: Pipeline CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN_REPO }}
        timeout-minutes: 2

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
        timeout-minutes: 2

      - name: Instalar dependencias
        run: npm ci
        timeout-minutes: 2

      - name: Esperar a que MySQL esté listo
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando a MySQL..."
            sleep 1
          done
        timeout-minutes: 2

      - name: Ejecutar migraciones de la base de datos
        run: npx prisma migrate deploy
        timeout-minutes: 2

  run-linting:
    needs: setup-environment
    runs-on: ubuntu-latest
    steps:
      - name: Ejecutar Lint
        run: npm run lint
        timeout-minutes: 2

  run-tests:
    needs: setup-environment
    runs-on: ubuntu-latest
    steps:
      - name: Ejecutar todas las pruebas (unitarias, integración y rendimiento)
        run: |
          set -e
          export PORT=3000
          npm run start &
          SERVER_PID=$!
          echo "Esperando a que el servidor esté listo..."
          sleep 10  # Espera 10 segundos
          npx wait-on http://localhost:${PORT}/products
          npm run test:all
          echo "Deteniendo el servidor..."
          kill $SERVER_PID
        timeout-minutes: 1.5

  run-e2e-selenium:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Ejecutar pruebas E2E con Selenium
        run: |
          set -e
          npm run selenium-test
        timeout-minutes: 2

  run-e2e-cypress:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Ejecutar pruebas E2E con Cypress
        run: |
          set -e
          npm run test:e2e
        timeout-minutes: 2

  deploy:
    needs: [run-tests, run-e2e-selenium, run-e2e-cypress]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Desplegar en Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/v1/services/srv-crsdonu8ii6s73ecpbpg/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY"

  notify-failure:
    needs: [run-tests, run-e2e-selenium, run-e2e-cypress]
    runs-on: ubuntu-latest
    if: failure() || cancelled()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN_REPO }}

      - name: Enviar notificación por correo electrónico de fallo
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
        run: node send-email-failure.js

  notify-success:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Enviar notificación de éxito
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
        run: node send-email-success.js
