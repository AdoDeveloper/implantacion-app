name: Pipeline CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  # Job para construir y ejecutar todas las pruebas
  construir-y-probar:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    description: "Compila el código, configura las dependencias necesarias y ejecuta pruebas unitarias, de integración, de rendimiento, E2E con Selenium y Cypress."

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    env:
      NODE_ENV: test
      DATABASE_URL: 'mysql://user:password@localhost:3306/testdb'

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN_REPO }}

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Esperar a que MySQL esté listo
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando a MySQL..."
            sleep 1
          done

      - name: Ejecutar migraciones de la base de datos
        run: npx prisma migrate deploy

      - name: Ejecutar Lint
        run: npm run lint

      - name: Instalar JMeter
        run: |
          wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz
          sudo mv apache-jmeter-5.6.3 /opt/jmeter
          sudo ln -s /opt/jmeter/bin/jmeter /usr/local/bin/jmeter

      - name: Instalar Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb

      - name: Configurar ChromeDriver
        run: |
          CHROME_DRIVER_VERSION=129.0.6668.70
          CHROME_DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${CHROME_DRIVER_VERSION}/linux64/chromedriver-linux64.zip"
          wget -q ${CHROME_DRIVER_URL} -O chromedriver-linux64.zip
          unzip -o chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version
          rm chromedriver-linux64.zip
          rm -rf chromedriver-linux64/

      - name: Ejecutar todas las pruebas (unitarias, integración y rendimiento)
        run: |
          set -e
          export PORT=3000
          npm run start &
          SERVER_PID=$!
          sleep 10
          npx wait-on http://localhost:${PORT}/products
          npm run test:all
          kill $SERVER_PID

      - name: Ejecutar pruebas E2E con Selenium
        run: npm run selenium-test

      - name: Ejecutar pruebas E2E con Cypress
        run: npm run test:e2e

      - name: Mostrar resultados de Cypress
        run: |
          cat cypress/reports/mochawesome.json || echo "No se encontraron archivos JSON de informe de Cypress."
          cat cypress/reports/mochawesome.html || echo "No se encontró el informe HTML de Cypress."

      - name: Mostrar resultados de JMeter
        run: cat testResults.jtl || echo "No se generó testResults.jtl."

      - name: Verificar informes de JMeter
        run: ls -la report

  # Job para desplegar la aplicación en Render
  desplegar:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    description: "Despliega la aplicación en Render si todas las pruebas pasan correctamente."
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Desplegar en Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/v1/services/srv-crsdonu8ii6s73ecpbpg/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY"

  # Job para notificar fallos y revertir cambios
  notificar-fallo:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    description: "Notifica sobre los fallos del pipeline y revierte el último merge commit si falla alguna etapa."
    if: failure() || cancelled()
    
    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN_REPO }}

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Obtener información del último merge
        id: last_merge
        run: |
          LAST_MERGE_COMMIT=$(git log --merges -1 --pretty=format:"%H")
          echo "Último commit de merge: $LAST_MERGE_COMMIT"
          echo "LAST_MERGE_COMMIT=$LAST_MERGE_COMMIT" >> $GITHUB_ENV

      - name: Verificar LAST_MERGE_COMMIT
        run: echo "LAST_MERGE_COMMIT=${{ env.LAST_MERGE_COMMIT }}"

      - name: Listar últimos 5 commits
        run: git log -5 --oneline

      - name: Configurar Git
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Revertir el último merge si hay fallo
        if: ${{ env.LAST_MERGE_COMMIT && env.LAST_MERGE_COMMIT != '' }}
        run: |
          git revert -m 1 $LAST_MERGE_COMMIT --no-edit
          git push origin main || (echo "Error al hacer push del revert" && exit 1)

      - name: Confirmar Revertido Exitoso
        run: |
          if git log -1 --grep="Revert"; then
            echo "Revertido exitosamente el commit: $LAST_MERGE_COMMIT"
          else
            echo "No se pudo revertir el commit: $LAST_MERGE_COMMIT"
            exit 1

      - name: Enviar notificación por correo electrónico de fallo
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
          TOKEN_REPO: ${{ secrets.TOKEN_REPO }}
        run: node send-email-failure.js

  # Job para notificar éxito del pipeline
  notificar-exito:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    description: "Notifica sobre el éxito del pipeline."
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Determinar si el commit es un revert
        id: check_revert
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MESSAGE" == Revert* ]]; then
            echo "IS_REVERT=true" >> $GITHUB_OUTPUT
          else
            echo "IS_REVERT=false" >> $GITHUB_OUTPUT

      - name: Enviar notificación de éxito normal
        if: steps.check_revert.outputs.IS_REVERT == 'false'
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
          TOKEN_REPO: ${{ secrets.TOKEN_REPO }}
        run: node send-email-success.js

      - name: Enviar notificación de éxito tras revert
        if: steps.check_revert.outputs.IS_REVERT == 'true'
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
          TOKEN_REPO: ${{ secrets.TOKEN_REPO }}
        run: node send-email-success-revert.js
