name: Pipeline CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  construir-y-probar:
    runs-on: ubuntu-latest
    timeout-minutes: 2  # Limitar el tiempo total del job a 2 minutos como margen de seguridad
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    env:
      NODE_ENV: test
      DATABASE_URL: 'mysql://user:password@localhost:3306/testdb'

    steps:
      - name: Obtener código
        uses: actions/checkout@v3
        timeout-minutes: 1.5  # Limitar el tiempo de este paso a 1.5 minutos

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
        timeout-minutes: 1.5

      - name: Instalar dependencias
        run: npm ci
        timeout-minutes: 1.5

      - name: Esperar a que MySQL esté listo
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando a MySQL..."
            sleep 1
          done
        timeout-minutes: 1.5

      - name: Ejecutar migraciones de la base de datos
        run: npx prisma migrate deploy
        timeout-minutes: 1.5

      - name: Ejecutar Lint
        run: npm run lint
        timeout-minutes: 1.5

      - name: Ejecutar todas las pruebas (unitarias, integración y rendimiento)
        run: |
            set -e
            export PORT=3000
            npm run start &
            SERVER_PID=$!
            echo "Esperando a que el servidor esté listo..."
            npx wait-on http://localhost:${PORT}/products
            npm run test:all
            echo "Deteniendo el servidor..."
            kill $SERVER_PID
        timeout-minutes: 1.5

      - name: Ejecutar pruebas E2E con Selenium
        run: |
          set -e
          npm run selenium-test
        timeout-minutes: 1.5

      - name: Ejecutar pruebas E2E con Cypress
        run: |
          set -e
          npm run test:e2e
        timeout-minutes: 1.5

      - name: Mostrar resultados de Cypress
        run: |
          echo "Mostrando resultados de pruebas de Cypress:"
          cat cypress/reports/mochawesome.json || echo "No se encontraron archivos JSON de informe de Cypress."
          cat cypress/reports/mochawesome.html || echo "No se encontró el informe HTML de Cypress."

      - name: Mostrar resultados de JMeter
        run: |
          echo "Mostrando resultados de pruebas de JMeter:"
          cat testResults.jtl || echo "No se generó testResults.jtl."

      - name: Verificar informes de JMeter
        run: |
          echo "Verificando contenido de report:"
          ls -la report

  desplegar:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3

      - name: Desplegar en Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/v1/services/srv-crsdonu8ii6s73ecpbpg/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY"

  notificar-fallo:
      needs: construir-y-probar
      runs-on: ubuntu-latest
      if: failure()
        
      steps:
        - name: Obtener código
          uses: actions/checkout@v3
        
        - name: Configurar Node.js
          uses: actions/setup-node@v3
          with:
           node-version: '20.x'
        
        - name: Instalar dependencias
          run: npm ci
        
        - name: Obtener información del último merge
          id: last_merge
          run: |
              # Obtener el SHA del último commit merge en la rama principal
                LAST_MERGE_COMMIT=$(git log -1 --merges --pretty=format:"%H")
                echo "Último commit de merge: $LAST_MERGE_COMMIT"
                echo "LAST_MERGE_COMMIT=$LAST_MERGE_COMMIT" >> $GITHUB_ENV

              - name: Revertir el último merge
                if: failure()
                env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    if [ -n "$LAST_MERGE_COMMIT" ]; then
                    echo "Revirtiendo el merge commit: $LAST_MERGE_COMMIT"
                      curl -X POST \
                        -H "Authorization: token $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${{ github.repository }}/git/commits" \
                      -d '{"message": "Revertir el último merge fallido", "parents": ["'"$LAST_MERGE_COMMIT"'"], "tree": "'"$(git write-tree)"'"}'
                    
                  # Revertir el commit de manera local
                  git revert -m 1 $LAST_MERGE_COMMIT --no-edit
                  git push origin main
                else
                    echo "No se encontró un commit de merge para revertir."
                fi
        
        - name: Enviar notificación por correo electrónico de fallo
          env:
              GMAIL_USER: ${{ secrets.GMAIL_USER }}
              GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
              TOKEN_REPO: ${{ secrets.TOKEN_REPO }}
          run: node send-email-failure.js

  notificar-exito:
    needs: construir-y-probar
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Obtener código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Instalar dependencias
        run: npm ci

      - name: Enviar notificación por correo electrónico de éxito
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
          TOKEN_REPO: ${{ secrets.TOKEN_REPO }}
        run: node send-email-success.js
